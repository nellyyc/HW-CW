int fib(int n)

{

       if (n <= 0) // base case

            return 0;

      else if (n == 1) // base case

             return 1;

       else

             return fib(n – 1) + fib(n – 2);

}

/* the time complexitiy for this algorithm is exponential, O(2^n)
/* each call to the fib funtion leads to 2 additional recursive calls until the base case is reached 
/* this leads to exponential growth in # of function calls
